import numpy as np
from numpy.random import uniform 
import matplotlib.pyplot as plt
from scipy import interpolate
from scipy.optimize import root
from scipy.optimize import newton
import random
import pandas as pd
from scipy.stats import poisson
from scipy.stats import expon
from runTracks import runTracks
from detector import detector
import sys
import os
import time
import csv
sys.path.append(sys.path[0]+'/bolsig')
from Bolsig_python import mobilityCalc

#define necessary functions
def max_value(inputlist):
  return max([max(sublist) for sublist in inputlist])

def nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return array[idx]


"""
------------------------------------------------------------------
Code for test run
"""

#Define run parameters 

#tau value
tau=6.409214453193086e-06

track_fraction = 0.2 #fraction of input files used
det_of_interest = range(0,18) #detectors of interest
#Count Rates in the detectors. I.e. for what hit rates are we studying detector behaviour.
with open(os.path.join(sys.path[0], 'data/Count_rates.csv'), "r") as rf:
  df = pd.read_csv(rf)
  cr_gamma_5yr = np.mean(df['Gamma_5yr [cps]'])
  cr_SF_5yr = np.mean(df['SF_5yr [cps]'])
cr_gamma_list =np.array([1,5,10,20])*cr_gamma_5yr 
cr_SF_list =np.array([1])*cr_SF_5yr 
gamma_file = 'data/Gamma_5yr_tracks.csv'
SF_file = 'data/SF_5yr_tracks.csv'

#run for different values of applied voltage 
for V in np.array([1.1e3, 1.2e3,1.3e3,1.4e3,1.5e3]):
  #----------
  #Design detector, specifications gathered from https://www.lndinc.com/products/neutron-detectors/he3-detectors/25257/ 
  
  det = detector(r_a=0.0055e-3,r_c=(2.54e-2)/2,L=30e-2,V=V,P=4e5,T=300, R=1.2e3,tau=tau)
  
  #----------
  print('\nTau: ', tau, '[Ohm Farad]\n' )
  print('\n Calculating for ',track_fraction*100, '% of the input files.')
  #change back to correct directory
  os.chdir(os.path.dirname(os.path.abspath(__file__)))


  #Detector coordinates, gathered from MCNP run.
  detCoords=[]
  for i in range(0,18): 
    detCoord = 14.1*np.array([np.sin(i*20* np.pi/180),np.cos(i*20* np.pi/180)])
    detCoords.append(detCoord)
  
  #Calculate signals from tracks generated by radiation defined in input files. t_start is the global start time.
  t_start=0
  cr_neutron = -1
  #find mean count rate of gammas

  #------------
  #excecute runtracks and add signals for different count rates of gamma radiations
  for cr_gamma in cr_gamma_list:
    print('\n\nGamma count rate:', cr_gamma)
    time.sleep(1)
    #create new directories
    newDirs =['results/NPS_by_detector/tau='+str(tau), 'results/gamma/tau='+str(tau), 'results/NPS_by_detector/tau='+str(tau)+'/gamma', 'results/NPS_by_detector/tau='+str(tau)+'/gamma/count_rate='+str(round(cr_gamma))]
    for newDir in newDirs:
      if not os.path.exists(newDir):
        os.mkdir(newDir)
  
    #calculate pulses for each track in input file
    NPS_g, t0_g, detector_g, dt_g,I_g, t_g, allSig_g = runTracks(det,gamma_file, 'data/Count_rates.csv', 1/track_fraction,t_start, detCoords,det_of_interest,rate=cr_gamma)
    
    #Interpolate each signal, this provides possibility to add all signals
    print('Interpolating... ',end= '\r')
    allSig_g_inter = np.array([interpolate.interp1d(t_g[i],allSig_g[i],kind='slinear',  
                  fill_value=0, bounds_error=False) 
                  for i in range(0,len(t_g))])
    
    #global time array
    t_global_g = np.linspace(t_start,max_value(t_g),10000)

    #array for storing pulse values for different detectors
    signal_in_detector_from_g=[[] for i in range(18)]

    #add pule values to det list
    for det_no in range(0,18):
      totSig_g = np.zeros((len(t_global_g)))
      index_g = np.where(np.array(detector_g)==det_no)[0]
      for s in allSig_g_inter[index_g]:
          totSig_g+=s(t_global_g)
          print('Adding all signals from gamma induced tracks in detector: ',det_no,'...'   ,end='\r')
      dict={'t_0_g':np.take(t0_g,index_g), 'NPS_g':np.take(NPS_g,index_g)}
      df = pd.DataFrame(dict) 
      df.to_csv(os.path.join(sys.path[0],'results/NPS_by_detector/tau='+str(tau)+'/gamma/count_rate='+str(round(cr_gamma))+'/'+str(det_no)+'.csv'))  

      signal_in_detector_from_g[det_no] =totSig_g
    
    signal_in_detector = np.array(signal_in_detector_from_g)
    dict = {'Time': t_global_g, 'Detector_0':signal_in_detector[0], 'Detector_1':signal_in_detector[1],  
    'Detector_2':signal_in_detector[2], 'Detector_3':signal_in_detector[3], 'Detector_4':signal_in_detector[4],   
    'Detector_5':signal_in_detector[5], 'Detector_6':signal_in_detector[6], 'Detector_7':signal_in_detector[7],
    'Detector_8':signal_in_detector[8], 'Detector_9':signal_in_detector[9], 'Detector_10':signal_in_detector[10],
    'Detector_11':signal_in_detector[11], 'Detector_12':signal_in_detector[12], 'Detector_13':signal_in_detector[13],
    'Detector_14':signal_in_detector[14], 'Detector_15':signal_in_detector[15], 'Detector_16':signal_in_detector[16],
    'Detector_17':signal_in_detector[17]   }
    df = pd.DataFrame(dict) 

    #save results to file
    df.to_csv(os.path.join(sys.path[0],'results/gamma/tau='+str(tau)+'/V='+str(V)+'count_rate='+str(round(cr_gamma))))    
  #----------
  #Spontaneous fission
  track_fraction=0.12
  for cr_SF in cr_SF_list:
    print('\nSF count rate:', cr_SF,'\n')
    newDirs =['results/NPS_by_detector/tau='+str(tau), 'results/SF/tau='+str(tau), 'results/NPS_by_detector/tau='+str(tau)+'/SF',  'results/NPS_by_detector/tau='+str(tau)+'/SF/count_rate='+str(round(cr_SF))]
    for newDir in newDirs:
      if not os.path.exists(newDir):
        os.mkdir(newDir)
  
        
    NPS_n, t0_n,detector_n, dt_n, I_n,t_n, allSig_n = runTracks(det,SF_file, 'data/Count_rates.csv', 1/track_fraction,t_start, detCoords,det_of_interest, rate=cr_SF)
    
    #Interpolate each signal, this provides possibility to add all signals
    print('Interpolating... ',end= '\r')
    allSig_n_inter = np.array([interpolate.interp1d(t_n[i],allSig_n[i],kind='slinear',  
                      fill_value=0, bounds_error=False) 
                      for i in range(0,len(t_n))])
    t_global_n = np.arange(t_start,max_value(t_n),4e-7) 
    signal_in_detector_from_n=[[] for i in range(18)]
    for det_no in range(0,18):
      totSig_n = np.zeros((len(t_global_n)))
      index_n = np.where(np.array(detector_n)==det_no)[0]
      for s in allSig_n_inter[index_n]:
          totSig_n+=s(t_global_n)
          print('Adding all signals from neutron induced tracks in detector: ',det_no,'...'   ,end='\r')
      dict={'t_0_n':np.take(t0_n,index_n), 'NPS_n':np.take(NPS_n,index_n)}
      df = pd.DataFrame(dict) 
      df.to_csv(os.path.join(sys.path[0],'results/NPS_by_detector/tau='+str(tau)+'/SF/count_rate='+str(round(cr_SF))+'/'+str(det_no)+'.csv'))  
      signal_in_detector_from_n[det_no] = totSig_n      
    
    signal_in_detector = np.array(signal_in_detector_from_n)
    dict = {'Time': t_global_n, 'Detector_0':signal_in_detector[0], 'Detector_1':signal_in_detector[1],  
    'Detector_2':signal_in_detector[2], 'Detector_3':signal_in_detector[3], 'Detector_4':signal_in_detector[4],   
    'Detector_5':signal_in_detector[5], 'Detector_6':signal_in_detector[6], 'Detector_7':signal_in_detector[7],
    'Detector_8':signal_in_detector[8], 'Detector_9':signal_in_detector[9], 'Detector_10':signal_in_detector[10],
    'Detector_11':signal_in_detector[11], 'Detector_12':signal_in_detector[12], 'Detector_13':signal_in_detector[13],
    'Detector_14':signal_in_detector[14], 'Detector_15':signal_in_detector[15], 'Detector_16':signal_in_detector[16],
    'Detector_17':signal_in_detector[17]   }
    df = pd.DataFrame(dict)         
    
    #save results to file
    df.to_csv(os.path.join(sys.path[0],'results/SF/tau='+str(tau)+'/V='+str(V)+'count_rate='+str(round(cr_SF))))    

